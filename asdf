#!/usr/bin/env python

import rospy
import cv2
import numpy as np
from std_msgs.msg import Float32
import threading

class VideoRecorder:
    def __init__(self):
        self.recording = False
        self.out = None
        self.cap = cv2.VideoCapture(0)  # Assuming the first camera device
        self.lock = threading.Lock()

        rospy.init_node('video_recorder', anonymous=True)
        rospy.Subscriber('/Throttle', Float32, self.callback)
        rospy.on_shutdown(self.cleanup)
        print("Video recorder node initialized")

    def callback(self, data):
        if data.data > 0:
            self.start_recording()
        else:
            self.stop_recording()

    def start_recording(self):
        with self.lock:
            if not self.recording:
                fourcc = cv2.VideoWriter_fourcc(*'XVID')
                self.out = cv2.VideoWriter('/home/jetson/catkin_ws/video/output.avi', fourcc, 20.0, (640, 480))
                self.recording = True
                print("Recording started")

    def stop_recording(self):
        with self.lock:
            if self.recording:
                self.recording = False
                self.out.release()
                self.out = None
                print("Recording stopped")

    def cleanup(self):
        self.cap.release()
        if self.out is not None:
            self.out.release()
        cv2.destroyAllWindows()

    def run(self):
        while not rospy.is_shutdown():
            ret, frame = self.cap.read()
            if ret:
                with self.lock:
                    if self.recording and self.out is not None:
                        self.out.write(frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                self.stop_recording()
                break

        self.cleanup()

if __name__ == '__main__':
    vr = VideoRecorder()
    vr.run()
